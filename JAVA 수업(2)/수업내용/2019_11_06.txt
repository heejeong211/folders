-콘솔: cmd창에 나오는 것.

-toString 메소드
문자열을 반환
모든 객체가 가지고있는 함수이다.
StringBuilder에서 toString()함수 쓰면 숫자를 문자열로 바꿔줌.

-StringBuilder vs String
String과 비슷한데 StringBuilder가 더 좋음.

-System.out.println(stb.toString()); -> 문자열 1234의 주소가 들어감.
System.out.println(stb); -> 객체가 직접들어가서 객체의 주소가 들어감. valueOf에서 toString()을 호출한다.

-@주소
기본적으로 모든 객체는 extends Object 이게 생략되어 있음.
Object 안에는 toString() 함수가 있음. 거기에 @와 주소가 있음.

-println함수에 객체가 들어가게 되면 toString()을 호출하게 된다.

-printf 메소드
print+format
%d -> 정수, %o -> 8진수, %x -> 16진수

-입력이 있으면 출력을 해야 함.

-Scannner = 입력
System.in -> 키보드 입력
nextInt()를 구분할 수 있는것 -> "1 3 5"; 에서 띄어쓰기    // 빈공간 아스키코드 32번

Scanner(File source)
Scanner(String source)
Scanner(InputStream source)
->원천 소스가 달라도 똑같은 함수로 사용할 수 있게끔 알아서 이렇게 하고 있다. 
이것을 캡슐화 라고 함.

-System.in
System은 클래스 in은 static 참조형 변수. in은 InputStream의 참조형 변수

-nextLine();
문자열 전체를 읽어 버림. 제어권이 키보드에게 넘거감. 키보드가 엔터칠 때까지.

----------------------------------------------
-배열이란: 자바에서는 하나의 데이터 타입으로 나뉨. 참조형이다. []를 쓴다.
int[] ref = new int[5]; =>데이터 타입은? int형 배열이다. 특이하게도 생성자가(함수()) 없다.
******배열은 연속된 공간이다.*******

-C언어 절차지향언어 이후에 객체지향언어가 나옴.
그래서 객체지향언어의 토대가 된게 C언어 이다.

-Box[] ar = new Box[5]; -> Box형을 가리키는 주소를 담을 수 있는 공간이 생김.

-배열은 항상 0부터 센다.

-배열 나오면 for문 사용하게 되어있다.

-배열 요소는 반복문을 통해 순차적 접근이 가능하며, 이것은 배열이 가진
큰 장점 중 하나이다.

-배열 생성과 동시에 초기화
int[] arr = new int[3]; //배열 생성
int[] arr = new int[] {1, 2, 3} // 배열 생성 및 초기화1. 이게 기본임.
int[] arr = {1, 2, 3} // 배열 생성 및 초기화2. (new 연산자 숨어 있음)

-배열선언 -> 방잡는 법, 값은 어떻게 입력하고 출력하는지..

-레퍼런스 타입(참조형 변수)이면 무조건 주소값만...

-배열의 참조 값 반환 가능
static int[] makeNewIntAry(int len) {
    int[] ar =  new int[len];
    return ar;
 }

-기본 자료형 배열은 모든 요소 0으로 초기화
인스턴스 배열(참조변수 배열)은 모든 요소 null로 초기화

-arraycopy
System.arraycopy(ar1 ,0 ar2, 3, 4); -> ar1을 0번째 부터 복사시작하고 ar2에 ar1 3번째부터 4번 복사한다.

-자바의 경우는 배열 실무에서 안씀.
이것보다 더 좋은게 더 많기 때문. (String도 배열임..)

-main 메소드의 매개변수 선언
public static void main(Stirng[] args) {...}
String[] -> 문자열 배열
args -> 

-String[] arr = new String[] {"Coffee", "Milk", "Orange"};
main(arr); -> 메인을 이렇게 빼 줄 수 있음.

Run Configurations 들어가서 Arguments에 들어가서 Program Arguments에 Coffee, Milk, Orange
넣기.......

Coffee, Milk , Orange -> 메인메소드에 넘겨줄 매개변수.

-Arguments -> 인자

-enhanced for문(for-each문)
int[] ar = {1, 2, 3, 4, 5};
for(int i = 0; i < ar.length; i++) {
sysout(ar[i]);
} -> 일반 for문

int[] ar = {1, 2, 3, 4, 5};
for(int e : ar); ->코드의 양이 줄고 배열의 길이와 요소에 신경 쓸 필요 없다.
sysout(e); 
} -> enhanced for문 혹은 for-each문, for-each문은 따로 탈출 조건을 적어줄 필요가 없다. 
각각의 데이터 타입만 적어주면 됨. 
=> 앞으로는 for-each문 사용하기!!!!!!

-2차원 배열
int [][] arr2 = new int[3][4] -> 괄호가 하나 더 있는 것이 2차원 배열임.
[3] -> 행(가로)
[4] -> 열(세로)
=> 얘네는 행열로 이뤄지고 있어 이중for문을 사용한다.

-arr.length -> 행에 대한 개수를 뽑아내고
arr[i].length -> 행을 이용해서 열에 대한 개수를 뽑아낸다.

-2차원 배열 초기화
아무것도 안넣으면 객체라 0이 나옴.

--------------------------------------------------------
*****test***** 명품 자바 프로그래밍
1. Circle 클래스와 CircleTest 클래스를 완성하라.
실행 결과와 같이 3개의 Circle 개체 배열을 만들고 (new를 3개 해줘야 함. for문을 돌리면서...)
x, y, radius 값을 읽어 3개의 Circle 객체를 만들고 (set, get만들기..)
show()를 이용하여 이들의 모두 출력한다.(Scanner)

x, y, radius >>3.0 3.0 5
x, y, radius >>2.5 2.7 6
x, y, radius >>3.0 3.0 4
(3.0, 3.0)5
(2.5, 2.7)6
(3.0, 3.0)4

2. 다음의 클래스 함수를 만드시오. (static 함수)
클래스 명은 MyMath 이며 아래의 두 함수를 static 으로 만드시오.

함수명: myMin
파라미터: int 배열
리턴값 배열의 값중 최소값

함수명: myMax
파라미터: int 배열
리턴값 배열의 값중 최소값

테스트 클래스 MyMathTest 를 만든후 int 배열 5개를 
키보드 입력으로 받은후 myMin, myMax 함수 호출할것.

--------------------------------------------------------
어제자....

1.접근제한자 4가지에 대하여 설명하고 접근제한범위에 대하여 설명하시오.

2.인스턴스 함수에 정적 함수 또는 변수 가 올 수 없는 이유는?

3.문자열 생성 방법 2가지에 대하여 설명하고 차이는 무엇인가요?

4.메소드 오버로딩이란 무엇인가?

5.Method  area, call stack, heap  영역에 대하여 설명하시오.

6.string 객체가 불변인 이유는 무엇인가?

7.String 과 StringBuilder의 차이는 무엇인가?

---------------------------------------------------------
면접

1. 아래의 배열의 메모리의 그림을 그리시오.
int[][] arr = new arr[3][3];

2.일반 for 문과 for each 문의 차이는?
for문은 초기화와 반복문이 탈출 조건과 증가하는 값을 가지고 있지만,
for each문은 따로 탈출 조건을 적어줄 필요가 없다.

3.정보은닉이란 무엇인가요?
해당 가지고 있는 멤버변수 안에 다이렉트로 접근하지 못하게
만들고 함수로서만 접근한게 만드는것이 정보은닉이다.
함수로 접근하게 만드니까 예외처리를 할 수 있다.

4.캡슐화란 무엇인가요?
프로그램 하나의 수많은 코드들이 있지만 그 프로그램을 이용하는 사람들은
굳이 그 코드를 세세하게 알 필요가 없다. 그저 그 프로그램을 이용하는 방법과 그 프
로그램이 어떤한 기능이 있는지만 알면 된다. 이것이 바로 캡슐화 이다.

5.this란 무엇이며, 용도는?
this란 자기 자신을 나타내는 것이고, 인스턴스 함수 안에서 현재 객체를 지칭할 때 쓰인다.
